#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UmlGraph version 4.6 (http://www.spinellis.gr/sw/umlgraph)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	// edu.umd.cs.piccolo.util.PBounds
	c470 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./PBounds.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PBounds </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + clone() </td></tr>
			<tr><td align="left"> + isEmpty() </td></tr>
			<tr><td align="left"> + reset() </td></tr>
			<tr><td align="left"> + resetToZero() </td></tr>
			<tr><td align="left"> + setRect() </td></tr>
			<tr><td align="left"> + setRect() </td></tr>
			<tr><td align="left"> + setRect() </td></tr>
			<tr><td align="left"> + add() </td></tr>
			<tr><td align="left"> + add() </td></tr>
			<tr><td align="left"> + add() </td></tr>
			<tr><td align="left"> + getOrigin() </td></tr>
			<tr><td align="left"> + setOrigin() </td></tr>
			<tr><td align="left"> + getSize() </td></tr>
			<tr><td align="left"> + setSize() </td></tr>
			<tr><td align="left"> + getCenter2D() </td></tr>
			<tr><td align="left"> + moveBy() </td></tr>
			<tr><td align="left"> + expandNearestIntegerDimensions() </td></tr>
			<tr><td align="left"> + inset() </td></tr>
			<tr><td align="left"> + deltaRequiredToCenter() </td></tr>
			<tr><td align="left"> + deltaRequiredToContain() </td></tr>
			<tr><td align="left"> + toString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.PCamera
	c475 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../PCamera.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PCamera </td></tr>
			<tr><td><font point-size="7.0"> edu.umd.cs.piccolo </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + getComponent() </td></tr>
			<tr><td align="left"> + setComponent() </td></tr>
			<tr><td align="left"> + repaintFrom() </td></tr>
			<tr><td align="left"> + repaintFromLayer() </td></tr>
			<tr><td align="left"> + getLayersReference() </td></tr>
			<tr><td align="left"> + getLayerCount() </td></tr>
			<tr><td align="left"> + getLayer() </td></tr>
			<tr><td align="left"> + indexOfLayer() </td></tr>
			<tr><td align="left"> + addLayer() </td></tr>
			<tr><td align="left"> + addLayer() </td></tr>
			<tr><td align="left"> + removeLayer() </td></tr>
			<tr><td align="left"> + removeLayer() </td></tr>
			<tr><td align="left"> + getUnionOfLayerFullBounds() </td></tr>
			<tr><td align="left"> # paint() </td></tr>
			<tr><td align="left"> # paintCameraView() </td></tr>
			<tr><td align="left"> # paintDebugInfo() </td></tr>
			<tr><td align="left"> + fullPaint() </td></tr>
			<tr><td align="left"> + pick() </td></tr>
			<tr><td align="left"> # pickAfterChildren() </td></tr>
			<tr><td align="left"> # pickCameraView() </td></tr>
			<tr><td align="left"> + getViewBounds() </td></tr>
			<tr><td align="left"> + setViewBounds() </td></tr>
			<tr><td align="left"> + getViewScale() </td></tr>
			<tr><td align="left"> + scaleView() </td></tr>
			<tr><td align="left"> + scaleViewAboutPoint() </td></tr>
			<tr><td align="left"> + setViewScale() </td></tr>
			<tr><td align="left"> + translateView() </td></tr>
			<tr><td align="left"> + setViewOffset() </td></tr>
			<tr><td align="left"> + getViewTransform() </td></tr>
			<tr><td align="left"> + getViewTransformReference() </td></tr>
			<tr><td align="left"> + setViewTransform() </td></tr>
			<tr><td align="left"> + animateViewToCenterBounds() </td></tr>
			<tr><td align="left"> + animateViewToPanToBounds() </td></tr>
			<tr><td align="left"> + animateViewToIncludeBounds() </td></tr>
			<tr><td align="left"> + animateViewToTransform() </td></tr>
			<tr><td align="left"> + getViewConstraint() </td></tr>
			<tr><td align="left"> + setViewConstraint() </td></tr>
			<tr><td align="left"> # applyViewConstraints() </td></tr>
			<tr><td align="left"> + viewToLocal() </td></tr>
			<tr><td align="left"> + viewToLocal() </td></tr>
			<tr><td align="left"> + viewToLocal() </td></tr>
			<tr><td align="left"> + localToView() </td></tr>
			<tr><td align="left"> + localToView() </td></tr>
			<tr><td align="left"> + localToView() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.PNode
	c476 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../PNode.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PNode </td></tr>
			<tr><td><font point-size="7.0"> edu.umd.cs.piccolo </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + animateToBounds() </td></tr>
			<tr><td align="left"> + animateTransformToBounds() </td></tr>
			<tr><td align="left"> + animateToPositionScaleRotation() </td></tr>
			<tr><td align="left"> + animateToTransform() </td></tr>
			<tr><td align="left"> + animateToColor() </td></tr>
			<tr><td align="left"> + animateToTransparency() </td></tr>
			<tr><td align="left"> + addActivity() </td></tr>
			<tr><td align="left"> + getClientProperties() </td></tr>
			<tr><td align="left"> + getAttribute() </td></tr>
			<tr><td align="left"> + addAttribute() </td></tr>
			<tr><td align="left"> + getClientPropertyKeysEnumeration() </td></tr>
			<tr><td align="left"> + getAttribute() </td></tr>
			<tr><td align="left"> + getBooleanAttribute() </td></tr>
			<tr><td align="left"> + getIntegerAttribute() </td></tr>
			<tr><td align="left"> + getDoubleAttribute() </td></tr>
			<tr><td align="left"> + getClientProperty() </td></tr>
			<tr><td align="left"> + addClientProperty() </td></tr>
			<tr><td align="left"> + getClientPropertyKeysIterator() </td></tr>
			<tr><td align="left"> + clone() </td></tr>
			<tr><td align="left"> + localToParent() </td></tr>
			<tr><td align="left"> + localToParent() </td></tr>
			<tr><td align="left"> + localToParent() </td></tr>
			<tr><td align="left"> + parentToLocal() </td></tr>
			<tr><td align="left"> + parentToLocal() </td></tr>
			<tr><td align="left"> + parentToLocal() </td></tr>
			<tr><td align="left"> + localToGlobal() </td></tr>
			<tr><td align="left"> + localToGlobal() </td></tr>
			<tr><td align="left"> + localToGlobal() </td></tr>
			<tr><td align="left"> + globalToLocal() </td></tr>
			<tr><td align="left"> + globalToLocal() </td></tr>
			<tr><td align="left"> + globalToLocal() </td></tr>
			<tr><td align="left"> + getLocalToGlobalTransform() </td></tr>
			<tr><td align="left"> + getGlobalToLocalTransform() </td></tr>
			<tr><td align="left"> + getListenerList() </td></tr>
			<tr><td align="left"> + addInputEventListener() </td></tr>
			<tr><td align="left"> + removeInputEventListener() </td></tr>
			<tr><td align="left"> + addPropertyChangeListener() </td></tr>
			<tr><td align="left"> + addPropertyChangeListener() </td></tr>
			<tr><td align="left"> + removePropertyChangeListener() </td></tr>
			<tr><td align="left"> + removePropertyChangeListener() </td></tr>
			<tr><td align="left"> + getPropertyChangeParentMask() </td></tr>
			<tr><td align="left"> + setPropertyChangeParentMask() </td></tr>
			<tr><td align="left"> # firePropertyChange() </td></tr>
			<tr><td align="left"> # fireChildPropertyChange() </td></tr>
			<tr><td align="left"> + getBounds() </td></tr>
			<tr><td align="left"> + getBoundsReference() </td></tr>
			<tr><td align="left"> + startResizeBounds() </td></tr>
			<tr><td align="left"> + endResizeBounds() </td></tr>
			<tr><td align="left"> + setX() </td></tr>
			<tr><td align="left"> + setY() </td></tr>
			<tr><td align="left"> + setWidth() </td></tr>
			<tr><td align="left"> + setHeight() </td></tr>
			<tr><td align="left"> + setBounds() </td></tr>
			<tr><td align="left"> + setBounds() </td></tr>
			<tr><td align="left"> # internalUpdateBounds() </td></tr>
			<tr><td align="left"> + resetBounds() </td></tr>
			<tr><td align="left"> + getX() </td></tr>
			<tr><td align="left"> + getY() </td></tr>
			<tr><td align="left"> + getWidth() </td></tr>
			<tr><td align="left"> + getHeight() </td></tr>
			<tr><td align="left"> + getGlobalBounds() </td></tr>
			<tr><td align="left"> + centerBoundsOnPoint() </td></tr>
			<tr><td align="left"> + centerFullBoundsOnPoint() </td></tr>
			<tr><td align="left"> + intersects() </td></tr>
			<tr><td align="left"> + getFullBounds() </td></tr>
			<tr><td align="left"> + getFullBoundsReference() </td></tr>
			<tr><td align="left"> + computeFullBounds() </td></tr>
			<tr><td align="left"> + getUnionOfChildrenBounds() </td></tr>
			<tr><td align="left"> + getGlobalFullBounds() </td></tr>
			<tr><td align="left"> + fullIntersects() </td></tr>
			<tr><td align="left"> # getBoundsVolatile() </td></tr>
			<tr><td align="left"> # getChildBoundsVolatile() </td></tr>
			<tr><td align="left"> # setChildBoundsVolatile() </td></tr>
			<tr><td align="left"> # getBoundsChanged() </td></tr>
			<tr><td align="left"> # setBoundsChanged() </td></tr>
			<tr><td align="left"> # getFullBoundsInvalid() </td></tr>
			<tr><td align="left"> # setFullBoundsInvalid() </td></tr>
			<tr><td align="left"> # getChildBoundsInvalid() </td></tr>
			<tr><td align="left"> # setChildBoundsInvalid() </td></tr>
			<tr><td align="left"> + signalBoundsChanged() </td></tr>
			<tr><td align="left"> + invalidateLayout() </td></tr>
			<tr><td align="left"> # parentBoundsChanged() </td></tr>
			<tr><td align="left"> + invalidateFullBounds() </td></tr>
			<tr><td align="left"> # validateFullBounds() </td></tr>
			<tr><td align="left"> # layoutChildren() </td></tr>
			<tr><td align="left"> + getRotation() </td></tr>
			<tr><td align="left"> + setRotation() </td></tr>
			<tr><td align="left"> + rotate() </td></tr>
			<tr><td align="left"> + rotateInPlace() </td></tr>
			<tr><td align="left"> + rotateAboutPoint() </td></tr>
			<tr><td align="left"> + rotateAboutPoint() </td></tr>
			<tr><td align="left"> + getGlobalRotation() </td></tr>
			<tr><td align="left"> + setGlobalRotation() </td></tr>
			<tr><td align="left"> + getScale() </td></tr>
			<tr><td align="left"> + setScale() </td></tr>
			<tr><td align="left"> + scale() </td></tr>
			<tr><td align="left"> + scaleAboutPoint() </td></tr>
			<tr><td align="left"> + scaleAboutPoint() </td></tr>
			<tr><td align="left"> + getGlobalScale() </td></tr>
			<tr><td align="left"> + setGlobalScale() </td></tr>
			<tr><td align="left"> + getXOffset() </td></tr>
			<tr><td align="left"> + getYOffset() </td></tr>
			<tr><td align="left"> + getOffset() </td></tr>
			<tr><td align="left"> + setOffset() </td></tr>
			<tr><td align="left"> + setOffset() </td></tr>
			<tr><td align="left"> + offset() </td></tr>
			<tr><td align="left"> + translate() </td></tr>
			<tr><td align="left"> + getGlobalTranslation() </td></tr>
			<tr><td align="left"> + setGlobalTranslation() </td></tr>
			<tr><td align="left"> + transformBy() </td></tr>
			<tr><td align="left"> + lerp() </td></tr>
			<tr><td align="left"> + position() </td></tr>
			<tr><td align="left"> + getTransform() </td></tr>
			<tr><td align="left"> + getTransformReference() </td></tr>
			<tr><td align="left"> + getInverseTransform() </td></tr>
			<tr><td align="left"> + setTransform() </td></tr>
			<tr><td align="left"> + getPaintInvalid() </td></tr>
			<tr><td align="left"> + setPaintInvalid() </td></tr>
			<tr><td align="left"> + getChildPaintInvalid() </td></tr>
			<tr><td align="left"> + setChildPaintInvalid() </td></tr>
			<tr><td align="left"> + invalidatePaint() </td></tr>
			<tr><td align="left"> + validateFullPaint() </td></tr>
			<tr><td align="left"> + repaint() </td></tr>
			<tr><td align="left"> + repaintFrom() </td></tr>
			<tr><td align="left"> + isOpaque() </td></tr>
			<tr><td align="left"> + getOccluded() </td></tr>
			<tr><td align="left"> + setOccluded() </td></tr>
			<tr><td align="left"> + getVisible() </td></tr>
			<tr><td align="left"> + setVisible() </td></tr>
			<tr><td align="left"> + getPaint() </td></tr>
			<tr><td align="left"> + setPaint() </td></tr>
			<tr><td align="left"> + getTransparency() </td></tr>
			<tr><td align="left"> + setTransparency() </td></tr>
			<tr><td align="left"> # paint() </td></tr>
			<tr><td align="left"> + fullPaint() </td></tr>
			<tr><td align="left"> # paintAfterChildren() </td></tr>
			<tr><td align="left"> + toImage() </td></tr>
			<tr><td align="left"> + toImage() </td></tr>
			<tr><td align="left"> + toImage() </td></tr>
			<tr><td align="left"> + print() </td></tr>
			<tr><td align="left"> + print() </td></tr>
			<tr><td align="left"> + getPickable() </td></tr>
			<tr><td align="left"> + setPickable() </td></tr>
			<tr><td align="left"> + getChildrenPickable() </td></tr>
			<tr><td align="left"> + setChildrenPickable() </td></tr>
			<tr><td align="left"> # pick() </td></tr>
			<tr><td align="left"> + fullPick() </td></tr>
			<tr><td align="left"> + findIntersectingNodes() </td></tr>
			<tr><td align="left"> # pickAfterChildren() </td></tr>
			<tr><td align="left"> + addChild() </td></tr>
			<tr><td align="left"> + addChild() </td></tr>
			<tr><td align="left"> + addChildren() </td></tr>
			<tr><td align="left"> + isAncestorOf() </td></tr>
			<tr><td align="left"> + isDescendentOf() </td></tr>
			<tr><td align="left"> + isDescendentOfRoot() </td></tr>
			<tr><td align="left"> + moveToBack() </td></tr>
			<tr><td align="left"> + moveInBackOf() </td></tr>
			<tr><td align="left"> + moveToFront() </td></tr>
			<tr><td align="left"> + moveInFrontOf() </td></tr>
			<tr><td align="left"> + getParent() </td></tr>
			<tr><td align="left"> + setParent() </td></tr>
			<tr><td align="left"> + indexOfChild() </td></tr>
			<tr><td align="left"> + removeChild() </td></tr>
			<tr><td align="left"> + removeChild() </td></tr>
			<tr><td align="left"> + removeChildren() </td></tr>
			<tr><td align="left"> + removeAllChildren() </td></tr>
			<tr><td align="left"> + removeFromParent() </td></tr>
			<tr><td align="left"> + reparent() </td></tr>
			<tr><td align="left"> + replaceWith() </td></tr>
			<tr><td align="left"> + getChildrenCount() </td></tr>
			<tr><td align="left"> + getChild() </td></tr>
			<tr><td align="left"> + getChildrenReference() </td></tr>
			<tr><td align="left"> + getChildrenIterator() </td></tr>
			<tr><td align="left"> + getRoot() </td></tr>
			<tr><td align="left"> + getAllNodes() </td></tr>
			<tr><td align="left"> + getAllNodes() </td></tr>
			<tr><td align="left"> + toString() </td></tr>
			<tr><td align="left"> # paramString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.PComponent
	c481 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../PComponent.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> &laquo;interface&raquo; </td></tr>
			<tr><td> PComponent </td></tr>
			<tr><td><font point-size="7.0"> edu.umd.cs.piccolo </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + repaint() </td></tr>
			<tr><td align="left"> + paintImmediately() </td></tr>
			<tr><td align="left"> + pushCursor() </td></tr>
			<tr><td align="left"> + popCursor() </td></tr>
			<tr><td align="left"> + setInteracting() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.PLayer
	c482 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../PLayer.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PLayer </td></tr>
			<tr><td><font point-size="7.0"> edu.umd.cs.piccolo </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + getCamerasReference() </td></tr>
			<tr><td align="left"> + getCameraCount() </td></tr>
			<tr><td align="left"> + getCamera() </td></tr>
			<tr><td align="left"> + addCamera() </td></tr>
			<tr><td align="left"> + addCamera() </td></tr>
			<tr><td align="left"> + removeCamera() </td></tr>
			<tr><td align="left"> + removeCamera() </td></tr>
			<tr><td align="left"> + repaintFrom() </td></tr>
			<tr><td align="left"> # notifyCameras() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.PCanvas
	c483 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../PCanvas.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PCanvas </td></tr>
			<tr><td><font point-size="7.0"> edu.umd.cs.piccolo </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> # createDefaultCamera() </td></tr>
			<tr><td align="left"> + getPanEventHandler() </td></tr>
			<tr><td align="left"> + setPanEventHandler() </td></tr>
			<tr><td align="left"> + getZoomEventHandler() </td></tr>
			<tr><td align="left"> + setZoomEventHandler() </td></tr>
			<tr><td align="left"> + getCamera() </td></tr>
			<tr><td align="left"> + setCamera() </td></tr>
			<tr><td align="left"> + getRoot() </td></tr>
			<tr><td align="left"> + getLayer() </td></tr>
			<tr><td align="left"> + addInputEventListener() </td></tr>
			<tr><td align="left"> + removeInputEventListener() </td></tr>
			<tr><td align="left"> + getInteracting() </td></tr>
			<tr><td align="left"> + getAnimating() </td></tr>
			<tr><td align="left"> + setInteracting() </td></tr>
			<tr><td align="left"> + setDefaultRenderQuality() </td></tr>
			<tr><td align="left"> + setAnimatingRenderQuality() </td></tr>
			<tr><td align="left"> + setInteractingRenderQuality() </td></tr>
			<tr><td align="left"> + pushCursor() </td></tr>
			<tr><td align="left"> + popCursor() </td></tr>
			<tr><td align="left"> + setEnabled() </td></tr>
			<tr><td align="left"> # installInputSources() </td></tr>
			<tr><td align="left"> # removeInputSources() </td></tr>
			<tr><td align="left"> # sendInputEventToInputManager() </td></tr>
			<tr><td align="left"> + setBounds() </td></tr>
			<tr><td align="left"> + repaint() </td></tr>
			<tr><td align="left"> + paintComponent() </td></tr>
			<tr><td align="left"> + paintImmediately() </td></tr>
			<tr><td align="left"> + createTimer() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//edu.umd.cs.piccolo.PCamera extends edu.umd.cs.piccolo.PNode
	c476:p -> c475:p [dir=back,arrowtail=empty];
	//edu.umd.cs.piccolo.PLayer extends edu.umd.cs.piccolo.PNode
	c476:p -> c482:p [dir=back,arrowtail=empty];
	//edu.umd.cs.piccolo.PCanvas implements edu.umd.cs.piccolo.PComponent
	c481:p -> c483:p [dir=back,arrowtail=empty,style=dashed];
	// edu.umd.cs.piccolo.PCamera NAVASSOC edu.umd.cs.piccolo.PComponent
	c475:p -> c481:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// edu.umd.cs.piccolo.PNode NAVASSOC edu.umd.cs.piccolo.PNode
	c476:p -> c476:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// edu.umd.cs.piccolo.PNode NAVASSOC edu.umd.cs.piccolo.util.PBounds
	c476:p -> c470:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// edu.umd.cs.piccolo.PNode NAVASSOC edu.umd.cs.piccolo.util.PBounds
	c476:p -> c470:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// edu.umd.cs.piccolo.PCanvas NAVASSOC edu.umd.cs.piccolo.PCamera
	c483:p -> c475:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// edu.umd.cs.piccolo.PCamera DEPEND edu.umd.cs.piccolo.util.PBounds
	c475:p -> c470:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// edu.umd.cs.piccolo.PNode DEPEND edu.umd.cs.piccolo.util.PBounds
	c476:p -> c470:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// edu.umd.cs.piccolo.PComponent DEPEND edu.umd.cs.piccolo.util.PBounds
	c481:p -> c470:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// edu.umd.cs.piccolo.PLayer DEPEND edu.umd.cs.piccolo.util.PBounds
	c482:p -> c470:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// edu.umd.cs.piccolo.PCanvas DEPEND edu.umd.cs.piccolo.util.PBounds
	c483:p -> c470:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}


#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UmlGraph version 4.6 (http://www.spinellis.gr/sw/umlgraph)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	// edu.umd.cs.piccolo.event.PDragSequenceEventHandler
	c1016 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./PDragSequenceEventHandler.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td><font face="Helvetica-Oblique"> PDragSequenceEventHandler </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + isDragging() </td></tr>
			<tr><td align="left"> + setIsDragging() </td></tr>
			<tr><td align="left"> + getMinDragStartDistance() </td></tr>
			<tr><td align="left"> + setMinDragStartDistance() </td></tr>
			<tr><td align="left"> + getMousePressedCanvasPoint() </td></tr>
			<tr><td align="left"> # startDrag() </td></tr>
			<tr><td align="left"> # drag() </td></tr>
			<tr><td align="left"> # endDrag() </td></tr>
			<tr><td align="left"> # shouldStartDragInteraction() </td></tr>
			<tr><td align="left"> # getDragActivity() </td></tr>
			<tr><td align="left"> # startDragActivity() </td></tr>
			<tr><td align="left"> # stopDragActivity() </td></tr>
			<tr><td align="left"> # dragActivityFirstStep() </td></tr>
			<tr><td align="left"> # dragActivityStep() </td></tr>
			<tr><td align="left"> # dragActivityFinalStep() </td></tr>
			<tr><td align="left"> + mousePressed() </td></tr>
			<tr><td align="left"> + mouseDragged() </td></tr>
			<tr><td align="left"> + mouseReleased() </td></tr>
			<tr><td align="left"> # paramString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.event.PPanEventHandler
	c1018 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PPanEventHandler.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PPanEventHandler </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> # drag() </td></tr>
			<tr><td align="left"> # pan() </td></tr>
			<tr><td align="left"> + setAutopan() </td></tr>
			<tr><td align="left"> + getAutopan() </td></tr>
			<tr><td align="left"> + setMinAutopanSpeed() </td></tr>
			<tr><td align="left"> + setMaxAutopanSpeed() </td></tr>
			<tr><td align="left"> # dragActivityStep() </td></tr>
			<tr><td align="left"> # validatePanningSpeed() </td></tr>
			<tr><td align="left"> # paramString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.event.PZoomEventHandler
	c1019 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PZoomEventHandler.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PZoomEventHandler </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + getMinScale() </td></tr>
			<tr><td align="left"> + setMinScale() </td></tr>
			<tr><td align="left"> + getMaxScale() </td></tr>
			<tr><td align="left"> + setMaxScale() </td></tr>
			<tr><td align="left"> # dragActivityFirstStep() </td></tr>
			<tr><td align="left"> # dragActivityStep() </td></tr>
			<tr><td align="left"> # paramString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.event.PInputEvent
	c1020 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PInputEvent.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PInputEvent </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + pushCursor() </td></tr>
			<tr><td align="left"> + popCursor() </td></tr>
			<tr><td align="left"> + getCamera() </td></tr>
			<tr><td align="left"> + getTopCamera() </td></tr>
			<tr><td align="left"> + getComponent() </td></tr>
			<tr><td align="left"> + getInputManager() </td></tr>
			<tr><td align="left"> + getPath() </td></tr>
			<tr><td align="left"> + setPath() </td></tr>
			<tr><td align="left"> + getPickedNode() </td></tr>
			<tr><td align="left"> + getKeyCode() </td></tr>
			<tr><td align="left"> + getKeyChar() </td></tr>
			<tr><td align="left"> + getKeyLocation() </td></tr>
			<tr><td align="left"> + isActionKey() </td></tr>
			<tr><td align="left"> + getModifiers() </td></tr>
			<tr><td align="left"> + getModifiersEx() </td></tr>
			<tr><td align="left"> + getClickCount() </td></tr>
			<tr><td align="left"> + getWhen() </td></tr>
			<tr><td align="left"> + isAltDown() </td></tr>
			<tr><td align="left"> + isControlDown() </td></tr>
			<tr><td align="left"> + isMetaDown() </td></tr>
			<tr><td align="left"> + isShiftDown() </td></tr>
			<tr><td align="left"> + isLeftMouseButton() </td></tr>
			<tr><td align="left"> + isMiddleMouseButton() </td></tr>
			<tr><td align="left"> + isRightMouseButton() </td></tr>
			<tr><td align="left"> + isHandled() </td></tr>
			<tr><td align="left"> + setHandled() </td></tr>
			<tr><td align="left"> + getButton() </td></tr>
			<tr><td align="left"> + getWheelRotation() </td></tr>
			<tr><td align="left"> + getSourceSwingEvent() </td></tr>
			<tr><td align="left"> + isKeyEvent() </td></tr>
			<tr><td align="left"> + isMouseEvent() </td></tr>
			<tr><td align="left"> + isMouseWheelEvent() </td></tr>
			<tr><td align="left"> + isFocusEvent() </td></tr>
			<tr><td align="left"> + isMouseEnteredOrMouseExited() </td></tr>
			<tr><td align="left"> + isPopupTrigger() </td></tr>
			<tr><td align="left"> + getCanvasPosition() </td></tr>
			<tr><td align="left"> + getCanvasDelta() </td></tr>
			<tr><td align="left"> + getPositionRelativeTo() </td></tr>
			<tr><td align="left"> + getDeltaRelativeTo() </td></tr>
			<tr><td align="left"> + getPosition() </td></tr>
			<tr><td align="left"> + getDelta() </td></tr>
			<tr><td align="left"> + toString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.event.PDragEventHandler
	c1021 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PDragEventHandler.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PDragEventHandler </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> # getDraggedNode() </td></tr>
			<tr><td align="left"> # setDraggedNode() </td></tr>
			<tr><td align="left"> # shouldStartDragInteraction() </td></tr>
			<tr><td align="left"> # startDrag() </td></tr>
			<tr><td align="left"> # drag() </td></tr>
			<tr><td align="left"> # endDrag() </td></tr>
			<tr><td align="left"> + getMoveToFrontOnPress() </td></tr>
			<tr><td align="left"> + setMoveToFrontOnPress() </td></tr>
			<tr><td align="left"> # paramString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.event.PBasicInputEventHandler
	c1023 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PBasicInputEventHandler.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PBasicInputEventHandler </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + processEvent() </td></tr>
			<tr><td align="left"> + acceptsEvent() </td></tr>
			<tr><td align="left"> + getEventFilter() </td></tr>
			<tr><td align="left"> + setEventFilter() </td></tr>
			<tr><td align="left"> + keyPressed() </td></tr>
			<tr><td align="left"> + keyReleased() </td></tr>
			<tr><td align="left"> + keyTyped() </td></tr>
			<tr><td align="left"> + mouseClicked() </td></tr>
			<tr><td align="left"> + mousePressed() </td></tr>
			<tr><td align="left"> + mouseDragged() </td></tr>
			<tr><td align="left"> + mouseEntered() </td></tr>
			<tr><td align="left"> + mouseExited() </td></tr>
			<tr><td align="left"> + mouseMoved() </td></tr>
			<tr><td align="left"> + mouseReleased() </td></tr>
			<tr><td align="left"> + mouseWheelRotated() </td></tr>
			<tr><td align="left"> + mouseWheelRotatedByBlock() </td></tr>
			<tr><td align="left"> + keyboardFocusGained() </td></tr>
			<tr><td align="left"> + keyboardFocusLost() </td></tr>
			<tr><td align="left"> + toString() </td></tr>
			<tr><td align="left"> # paramString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// edu.umd.cs.piccolo.activities.PActivity
	c1033 [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../activities/PActivity.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td> PActivity </td></tr>
			<tr><td><font point-size="7.0"> edu.umd.cs.piccolo.activities </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
			<tr><td align="left"> + getStartTime() </td></tr>
			<tr><td align="left"> + setStartTime() </td></tr>
			<tr><td align="left"> + getStepRate() </td></tr>
			<tr><td align="left"> + setStepRate() </td></tr>
			<tr><td align="left"> + getNextStepTime() </td></tr>
			<tr><td align="left"> + getDuration() </td></tr>
			<tr><td align="left"> + setDuration() </td></tr>
			<tr><td align="left"> + getActivityScheduler() </td></tr>
			<tr><td align="left"> + setActivityScheduler() </td></tr>
			<tr><td align="left"> + isStepping() </td></tr>
			<tr><td align="left"> # isAnimation() </td></tr>
			<tr><td align="left"> # activityStarted() </td></tr>
			<tr><td align="left"> # activityStep() </td></tr>
			<tr><td align="left"> # activityFinished() </td></tr>
			<tr><td align="left"> + getDelegate() </td></tr>
			<tr><td align="left"> + setDelegate() </td></tr>
			<tr><td align="left"> + startAfter() </td></tr>
			<tr><td align="left"> + terminate() </td></tr>
			<tr><td align="left"> + terminate() </td></tr>
			<tr><td align="left"> + processStep() </td></tr>
			<tr><td align="left"> + getStopTime() </td></tr>
			<tr><td align="left"> + toString() </td></tr>
			<tr><td align="left"> # paramString() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//edu.umd.cs.piccolo.event.PDragSequenceEventHandler extends edu.umd.cs.piccolo.event.PBasicInputEventHandler
	c1023:p -> c1016:p [dir=back,arrowtail=empty];
	//edu.umd.cs.piccolo.event.PPanEventHandler extends edu.umd.cs.piccolo.event.PDragSequenceEventHandler
	c1016:p -> c1018:p [dir=back,arrowtail=empty];
	//edu.umd.cs.piccolo.event.PZoomEventHandler extends edu.umd.cs.piccolo.event.PDragSequenceEventHandler
	c1016:p -> c1019:p [dir=back,arrowtail=empty];
	//edu.umd.cs.piccolo.event.PDragEventHandler extends edu.umd.cs.piccolo.event.PDragSequenceEventHandler
	c1016:p -> c1021:p [dir=back,arrowtail=empty];
	// edu.umd.cs.piccolo.event.PDragSequenceEventHandler NAVASSOC edu.umd.cs.piccolo.activities.PActivity
	c1016:p -> c1033:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// edu.umd.cs.piccolo.event.PDragSequenceEventHandler NAVASSOC edu.umd.cs.piccolo.event.PInputEvent
	c1016:p -> c1020:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// edu.umd.cs.piccolo.event.PDragSequenceEventHandler DEPEND edu.umd.cs.piccolo.activities.PActivity
	c1016:p -> c1033:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

